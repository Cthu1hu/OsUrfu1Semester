using System;
using System.ComponentModel.Design;
using System.Runtime.CompilerServices;
using System.Threading;

namespace philosophers_os
{
    static class GlobalMutex
    {
        public static Mutex globalMutex = new Mutex();
    }
    class Fork
    {
        public int id;
        public Mutex m = new Mutex();
        public bool isTaken = false;
        public void take()
        {
            isTaken = true;
            m.WaitOne();

        }

        public void put()
        {
            m.ReleaseMutex();
            isTaken = false;
        }
    }


    class Philosopher
    {

        int id;
        Fork fork_left;
        Fork fork_right;
        uint eat_count;
        double wait_time;
        DateTime wait_start;
        bool stop_flag;
        bool debug_flag;
        Random random;
        int streak;
        public bool thelast;

        void think()
        {

            Console.WriteLine(this.id + " thinking");


            Thread.Sleep(this.random.Next(0, 100));


            Console.WriteLine(this.id + " hungry");


            this.wait_start = DateTime.Now;
        }

        void eat()
        {
            this.wait_time += DateTime.Now.Subtract(this.wait_start).TotalMilliseconds;
            Console.WriteLine(this.id + " eating");


            Thread.Sleep(this.random.Next(0, 100));

            eat_count++;
        }

        public Philosopher(int number, Fork left, Fork right, bool dbg)
        {
            this.id = number;
            this.fork_left = left;
            this.fork_right = right;
            this.eat_count = 0;
            this.wait_time = 0;
            this.debug_flag = true;
            this.stop_flag = false;
            this.random = new Random();
            this.streak = 0;

        }

        public void run()
        {
            while (!stop_flag)
            {
                think();

                if (this.streak <= 2)
                {
                    while (((this.fork_left.isTaken == true) || (this.fork_right.isTaken == true)))
                    {
                        Thread.Sleep(1);
                        this.wait_time += 1;
                    }
                    if (this.thelast == false)
                    {
                        this.fork_left.take();

                        Console.WriteLine(this.id + " took left fork");


                        this.fork_right.take();

                        Console.WriteLine(this.id + " took right fork");


                        eat();

                        this.fork_left.put();

                        Console.WriteLine(this.id + " put right fork");


                        this.fork_right.put();
                    }
                    else
                    {
                        this.fork_right.take();

                        Console.WriteLine(this.id + " took left fork");


                        this.fork_left.take();

                        Console.WriteLine(this.id + " took right fork");


                        eat();

                        this.fork_right.put();

                        Console.WriteLine(this.id + " put right fork");
                        this.fork_left.put();
                    }
                    this.streak++;

                    Console.WriteLine(this.id + " put left fork");

                }
                else
                {
                    this.streak = 0;
                    Thread.Sleep(50);
                    this.wait_time += 50;
                }

            }
        }

        public void stop()
        {
            stop_flag = true;
        }




        public void printStats()
        {
            Console.WriteLine(this.id + " " + this.eat_count + " " + Convert.ToInt32(this.wait_time));
        }
    };
    class Program
    {
        static void Main(string[] args)
        {
            int N = 5;
            bool dbg = false;
            int duration = 60000; Fork[] forks = new Fork[N];
            for (int i = 0; i < N; i++)
            {
                forks[i] = new Fork();
                forks[i].id = i + 1;
            }

            Philosopher[] phils = new Philosopher[N];
            for (int i = 0; i < N; i++)
            {
                phils[i] = new Philosopher(i + 1, forks[i], forks[(i + 1) % N], dbg);
                if (i != N - 1) phils[i].thelast = false;
                else phils[i].thelast = true;
            }

            Thread[] runners = new Thread[N];
            for (int i = 0; i < N; i++)
            {
                runners[i] = new Thread(phils[i].run);
            }
            for (int i = 0; i < N; i++)
            {
                runners[i].Start();
            }

            Thread.Sleep(duration);

            for (int i = 0; i < N; i++)
            {
                phils[i].stop();
            }

            for (int i = 0; i < N; i++)
            {
                runners[i].Join();
            }

            for (int i = 0; i < N; i++)
            {
                phils[i].printStats();
            }
        }
    }
}
